package de.fraunhofer.iosb.ivct;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import de.fraunhofer.iosb.tc_lib.TcInconclusive;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.DataTreeBuilder;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.EncodingRulesException;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataTypes;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.ObjectClassData;
import hla.rti1516e.AttributeHandle;
import hla.rti1516e.InteractionClassHandle;
import hla.rti1516e.ObjectClassHandle;
import hla.rti1516e.ParameterHandle;
import hla.rti1516e.exceptions.FederateNotExecutionMember;
import hla.rti1516e.exceptions.InvalidInteractionClassHandle;
import hla.rti1516e.exceptions.NameNotFound;
import hla.rti1516e.exceptions.NotConnected;
import hla.rti1516e.exceptions.RTIinternalError;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'mul' at '07.04.17 10:59' with Gradle 2.9
 *
 * @author mul, @date 07.04.17 10:59
 */
public class AllTests {
	@Test
	public void dummy() {
		RtiJunitImpl dummyRtiImpl = new RtiJunitImpl();
//		The following calls are not needed, since there is no real RTI involved
//		dummyRtiImpl.connect(federateReference, callbackModel);
//		dummyRtiImpl.createFederationExecution(federationExecutionName, fomModule);
//		dummyRtiImpl.joinFederationExecution(federateType, federationExecutionName);
		HlaDataTypes hlaDataTypes = new HlaDataTypes();
		Map<InteractionClassHandle, Set<ParameterHandle>> interactionClassHandleMap = new HashMap<InteractionClassHandle, Set<ParameterHandle>>();
		Map<ParameterHandle, String> parameterHandleDataTypeMap = new HashMap<ParameterHandle, String>();
		Map<ObjectClassHandle, ObjectClassData> objectClassAttributeHandleMap = new HashMap<ObjectClassHandle, ObjectClassData>();
		Map<AttributeHandle, String> attributeHandleDataTypeMap = new HashMap<AttributeHandle, String>();
		File f = new File("H:/Projects/Hla/MSG-134/IVCT/TS_HelloWorld/HelloWorld/src/main/resources/HelloWorld.xml");
		URL[] somUrls = new URL[1];
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = null;
		try {
			builder = factory.newDocumentBuilder();
			somUrls[0] = f.toURI().toURL();
		} catch (ParserConfigurationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			DataTreeBuilder dataTreeBuilder = new DataTreeBuilder(dummyRtiImpl, hlaDataTypes, interactionClassHandleMap, parameterHandleDataTypeMap, objectClassAttributeHandleMap, attributeHandleDataTypeMap);
			for (int i = 0; i < somUrls.length; i++) {
				Document document = builder.parse(somUrls[i].toString());
				Element elem = document.getDocumentElement();
				if (dataTreeBuilder.buildData(elem)) {
		            throw new TcInconclusive("EncodingRulesTesterBaseModel.processSOM: error in dataTreeBuilder.buildData");
				}
			}
		} catch (TcInconclusive e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			InteractionClassHandle ich = dummyRtiImpl.getInteractionClassHandle("HLAinteractionRoot.Communication");
			ParameterHandle messageParameterHandle = dummyRtiImpl.getParameterHandle(ich, "Message");
			String messageDataType = parameterHandleDataTypeMap.get(messageParameterHandle);
			HlaDataType messageHlaDataType = hlaDataTypes.dataTypeMap.get(messageDataType);

			//------------------------------------------------------------------------------------------------------------------------
			// Parameter test data
			byte[] parameterByteArray0 = new byte[6];
			parameterByteArray0[0] = 0x00;
			parameterByteArray0[1] = 0x00;
			parameterByteArray0[2] = 0x00;
			parameterByteArray0[3] = 0x01;
			parameterByteArray0[4] = 0x41;
			parameterByteArray0[5] = 0x14;
			try {
				assertTrue (messageHlaDataType.testBuffer(parameterByteArray0, 0, hlaDataTypes) == parameterByteArray0.length);
			} catch (EncodingRulesException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (NameNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidInteractionClassHandle e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}