buildscript {
    repositories {
		mavenLocal()
		mavenCentral()
	}
}

plugins {
	// use java application packaging feature
	id 'application'
}

mainClassName = 'de.fraunhofer.iosb.testrunner.JMSTestRunner'

task dockerBuildImage (type: Exec) {
	group = 'Docker'
	description = 'command line task to create docker image'
	executable 'docker'
	args 'build', '-t', "ivct/ts-hla-services:${TS_HLA_BaseVersion}", '--build-arg', "version=${TS_HLA_BaseVersion}", '.'
	dependsOn('distTar')
}

dependencies {
	implementation project(':ETC_FRA_Common')

	compileOnly libraries.ieee
	compileOnly libraries.tc_lib
	compileOnly libraries.slf4j_api
	compileOnly libraries.jsonSimple

	compileOnly files('libs/fr.itcs.sme.architecture.mm_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.base.api_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.base.core_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.base.mm_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.conception.mm_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.configuration.mm_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.deployment.mm_3.0.0.201206041019.jar')
	compileOnly files('libs/fr.itcs.sme.specification.mm_3.0.0.201206041019.jar')

	testImplementation project(':ETC_FRA_Common')

	testImplementation libraries.logback_classic
	testImplementation libraries.logback_core
	testImplementation libraries.slf4j_jcl_over_slf4j
	testImplementation libraries.slf4j_jul_to_slf4j
	testImplementation libraries.slf4j_log4j_over_slf4j

	// jfx is needed because docker images is currently using openjdk version 1.8.0_111-internal which has no jfx support
	testImplementation     files('libs/jfxrt.jar')
}

// Write the  IVCT-Version as set to variable in libraries.gradle
// in a  property-file
task writeVersion {
    group = "Build"
    description = "Creates a properties file with version information"

    doLast {
        def prop = new Properties()
        prop.version = ivctVersion
        prop.ivctVersion = ivctVersion
        prop.TS_HLA_BaseVersion = TS_HLA_BaseVersion
        prop.build = "git describe --tags".execute().text.trim()
        mkdir "src/main/resources"
        File propFile = file('src/main/resources/testCaseBuild.properties')
        prop.store(propFile.newWriter(), null)
    }
}
processResources.dependsOn writeVersion

clean.doLast {
  file('src/main/resources/testCaseBuild.properties').delete()
}

// write IVCT-Version informations to manifest - file
jar{ 
  manifest{
     attributes(
     'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date()),
        'ivctVersion' : ivctVersion,
        'build' :       "git describe --tags".execute().text.trim()
     )
  }
}
