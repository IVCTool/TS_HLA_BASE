package de.fraunhofer.iosb.ivct;

import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.Test;

import de.fraunhofer.iosb.tc_lib_encodingrulestester.AlternativeStringPair;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.EncodingRulesException;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataBasicType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataEnumType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataFixedArrayType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataFixedRecordType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataSimpleType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataTypes;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataVariableArrayType;
import de.fraunhofer.iosb.tc_lib_encodingrulestester.HlaDataVariantRecordType;
import hla.rti1516e.AttributeHandle;
import hla.rti1516e.ParameterHandle;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'mul' at '07.04.17 10:59' with Gradle 2.9
 *
 * @author mul, @date 07.04.17 10:59
 */
public class AllTests {
	@Test
	public void simpleDataTypeTest() {
		// FOM/SOM data types
		HlaDataTypes hlaDataTypes = new HlaDataTypes();
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAinteger16BE = new HlaDataBasicType("HLAinteger16BE", 16, true);
		hlaDataTypes.dataTypeMap.put("HLAinteger16BE", hlaDataTypeBasicHLAinteger16BE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAinteger32BE = new HlaDataBasicType("HLAinteger32BE", 32, true);
		hlaDataTypes.dataTypeMap.put("HLAinteger32BE", hlaDataTypeBasicHLAinteger32BE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAinteger64BE = new HlaDataBasicType("HLAinteger64BE", 64, true);
		hlaDataTypes.dataTypeMap.put("HLAinteger64BE", hlaDataTypeBasicHLAinteger64BE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAfloat32BE = new HlaDataBasicType("HLAfloat32BE", 32, true);
		hlaDataTypes.dataTypeMap.put("HLAfloat32BE", hlaDataTypeBasicHLAfloat32BE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAfloat64BE = new HlaDataBasicType("HLAfloat64BE", 64, true);
		hlaDataTypes.dataTypeMap.put("HLAfloat64BE", hlaDataTypeBasicHLAfloat64BE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAoctetPairBE = new HlaDataBasicType("HLAoctetPairBE", 16, true);
		hlaDataTypes.dataTypeMap.put("HLAoctetPairBE", hlaDataTypeBasicHLAoctetPairBE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAinteger16LE = new HlaDataBasicType("HLAinteger16LE", 16, false);
		hlaDataTypes.dataTypeMap.put("HLAinteger16LE", hlaDataTypeBasicHLAinteger16LE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAinteger32LE = new HlaDataBasicType("HLAinteger32LE", 32, false);
		hlaDataTypes.dataTypeMap.put("HLAinteger32LE", hlaDataTypeBasicHLAinteger32LE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAinteger64LE = new HlaDataBasicType("HLAinteger64LE", 64, false);
		hlaDataTypes.dataTypeMap.put("HLAinteger64LE", hlaDataTypeBasicHLAinteger64LE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAfloat32LE = new HlaDataBasicType("HLAfloat32LE", 32, false);
		hlaDataTypes.dataTypeMap.put("HLAfloat32LE", hlaDataTypeBasicHLAfloat32LE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAfloat64LE = new HlaDataBasicType("HLAfloat64LE", 64, false);
		hlaDataTypes.dataTypeMap.put("HLAfloat64LE", hlaDataTypeBasicHLAfloat64LE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAoctetPairLE = new HlaDataBasicType("HLAoctetPairLE", 16, false);
		hlaDataTypes.dataTypeMap.put("HLAoctetPairLE", hlaDataTypeBasicHLAoctetPairLE);
		// Basic
		HlaDataBasicType hlaDataTypeBasicHLAoctet = new HlaDataBasicType("HLAoctet", 8, true);
		hlaDataTypes.dataTypeMap.put("HLAoctet", hlaDataTypeBasicHLAoctet);
		// Basic
		HlaDataBasicType hlaDataTypeBasicUnsignedShort = new HlaDataBasicType("UnsignedShort", 16, true);
		hlaDataTypes.dataTypeMap.put("UnsignedShort", hlaDataTypeBasicUnsignedShort);
		// Simple
		HlaDataSimpleType hlaDataTypeSimpleHLAASCIIchar = new HlaDataSimpleType("HLAASCIIchar", hlaDataTypeBasicHLAoctet);
		hlaDataTypes.dataTypeMap.put("HLAASCIIchar", hlaDataTypeSimpleHLAASCIIchar);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple1 = new HlaDataSimpleType("HLAunicodeChar", hlaDataTypeBasicHLAoctetPairLE);
		hlaDataTypes.dataTypeMap.put("HLAunicodeChar", hlaDataTypeSimple1);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple2 = new HlaDataSimpleType("HLAbyte", hlaDataTypeBasicHLAoctet);
		hlaDataTypes.dataTypeMap.put("HLAbyte", hlaDataTypeSimple2);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple3 = new HlaDataSimpleType("HLAinteger64Time", hlaDataTypeBasicHLAinteger64BE);
		hlaDataTypes.dataTypeMap.put("HLAinteger64Time", hlaDataTypeSimple3);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple4 = new HlaDataSimpleType("HLAfloat64Time", hlaDataTypeBasicHLAfloat64BE);
		hlaDataTypes.dataTypeMap.put("HLAfloat64Time", hlaDataTypeSimple4);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple5 = new HlaDataSimpleType("TimeType", hlaDataTypeBasicHLAfloat32BE);
		hlaDataTypes.dataTypeMap.put("TimeType", hlaDataTypeSimple5);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple6 = new HlaDataSimpleType("LAType", hlaDataTypeBasicHLAfloat32BE);
		hlaDataTypes.dataTypeMap.put("LAType", hlaDataTypeSimple6);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple7 = new HlaDataSimpleType("DollarRate", hlaDataTypeBasicHLAfloat32BE);
		hlaDataTypes.dataTypeMap.put("DollarRate", hlaDataTypeSimple7);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple8 = new HlaDataSimpleType("Years", hlaDataTypeBasicHLAfloat32BE);
		hlaDataTypes.dataTypeMap.put("Years", hlaDataTypeSimple8);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple9 = new HlaDataSimpleType("DrinkCount", hlaDataTypeBasicUnsignedShort);
		hlaDataTypes.dataTypeMap.put("DrinkCount", hlaDataTypeSimple9);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple10 = new HlaDataSimpleType("EmplId", hlaDataTypeBasicHLAinteger32BE);
		hlaDataTypes.dataTypeMap.put("EmplId", hlaDataTypeSimple10);
		// Simple
		HlaDataSimpleType hlaDataTypeSimple11 = new HlaDataSimpleType("RateScale", hlaDataTypeBasicHLAinteger32BE);
		hlaDataTypes.dataTypeMap.put("RateScale", hlaDataTypeSimple11);
		// Enumerated
		HlaDataEnumType hlaDataTypeEnumerated0 = new HlaDataEnumType("HLAboolean", hlaDataTypeBasicHLAinteger32BE);
		hlaDataTypeEnumerated0.addEnumValue(0L, "HLAfalse");
		hlaDataTypeEnumerated0.addEnumValue(1L, "HLAtrue");
		hlaDataTypes.dataTypeMap.put("HLAboolean", hlaDataTypeEnumerated0);
		// Enumerated
		HlaDataEnumType hlaDataTypeEnumerated1 = new HlaDataEnumType("PriorityLevel", hlaDataTypeBasicHLAinteger32BE);
		hlaDataTypeEnumerated1.addEnumValue(0L, "Low");
		hlaDataTypeEnumerated1.addEnumValue(1L, "Medium");
		hlaDataTypeEnumerated1.addEnumValue(2L, "High");
		hlaDataTypes.dataTypeMap.put("PriorityLevel", hlaDataTypeEnumerated1);
		// Enumerated
		HlaDataEnumType hlaDataTypeEnumerated2 = new HlaDataEnumType("ExperienceLevel", hlaDataTypeBasicHLAinteger32BE);
		hlaDataTypeEnumerated2.addEnumValue(0L, "Trainee");
		hlaDataTypeEnumerated2.addEnumValue(1L, "Apprentice");
		hlaDataTypeEnumerated2.addEnumValue(2L, "Journeyman");
		hlaDataTypeEnumerated2.addEnumValue(3L, "Senior");
		hlaDataTypeEnumerated2.addEnumValue(4L, "Temporary");
		hlaDataTypeEnumerated2.addEnumValue(5L, "Master");
		hlaDataTypes.dataTypeMap.put("ExperienceLevel", hlaDataTypeEnumerated2);
		// Fixed Array
		HlaDataFixedArrayType hlaDataTypeFixedArrayMyFixedArray = new HlaDataFixedArrayType("MyFixedArray", "HLAinteger32BE", 4, true, 3);
		hlaDataTypes.dataTypeMap.put("MyFixedArray", hlaDataTypeFixedArrayMyFixedArray);
		// Fixed Array
		HlaDataFixedArrayType hlaDataTypeFixedArrayHLAASCIIstring3 = new HlaDataFixedArrayType("HLAASCIIstring3", "HLAASCIIchar", 1, true, 3);
		hlaDataTypes.dataTypeMap.put("HLAASCIIstring3", hlaDataTypeFixedArrayHLAASCIIstring3);
		// Variable Array
		HlaDataVariableArrayType hlaDataTypeVariableArrayMyVariableArray = new HlaDataVariableArrayType("MyVariableArray", hlaDataTypeBasicHLAinteger64BE);
		hlaDataTypes.dataTypeMap.put("MyVariableArray", hlaDataTypeVariableArrayMyVariableArray);
		// Variable Array
		HlaDataVariableArrayType hlaDataTypeVariableArrayHLAASCIIstring = new HlaDataVariableArrayType("HLAASCIIstring", hlaDataTypeSimpleHLAASCIIchar);
		hlaDataTypes.dataTypeMap.put("HLAASCIIstring", hlaDataTypeVariableArrayHLAASCIIstring);
		// Variable Array
		HlaDataVariableArrayType hlaDataTypeVariableArrayInnerArray = new HlaDataVariableArrayType("InnerArray", hlaDataTypeFixedArrayHLAASCIIstring3);
		hlaDataTypes.dataTypeMap.put("InnerArray", hlaDataTypeVariableArrayInnerArray);
		// Variable Array
		HlaDataVariableArrayType hlaDataTypeVariableArrayOuterArray = new HlaDataVariableArrayType("OuterArray", hlaDataTypeVariableArrayInnerArray);
		hlaDataTypes.dataTypeMap.put("OuterArray", hlaDataTypeVariableArrayOuterArray);
		// Fixed Record
		HlaDataFixedRecordType hlaDataTypeFixedRecord = new HlaDataFixedRecordType("HLAASCIIstring", false);
		hlaDataTypeFixedRecord.addField("Name", "HLAASCIIstring");
		hlaDataTypeFixedRecord.addField("Street", "HLAASCIIstring");
		hlaDataTypeFixedRecord.addField("City", "HLAASCIIstring");
		hlaDataTypeFixedRecord.addField("State", "HLAASCIIstring");
		hlaDataTypeFixedRecord.addField("Zip", "HLAASCIIstring");
		hlaDataTypes.dataTypeMap.put("AddressType", hlaDataTypeFixedRecord);

		// Variant Record
		Map<String, AlternativeStringPair> alternativeMap = new LinkedHashMap<String, AlternativeStringPair>();
		AlternativeStringPair alternative1 = new AlternativeStringPair("CoursePassed", "HLAboolean");
		alternativeMap.put("Trainee", alternative1);
		AlternativeStringPair alternative2 = new AlternativeStringPair("Rating", "RateScale");
		alternativeMap.put("Apprentice", alternative2);
		alternativeMap.put("Senior", alternative2);
		alternativeMap.put("Master", alternative2);
		AlternativeStringPair alternative3 = new AlternativeStringPair("NA", "NA");
		alternativeMap.put("HLAother", alternative3);
		HlaDataVariantRecordType hlaDataTypeVariantRecord = new HlaDataVariantRecordType("WaiterValue", "ValIndex", "ExperienceLevel", alternativeMap);
		hlaDataTypes.dataTypeMap.put("WaiterValue", hlaDataTypeVariantRecord);

		//------------------------------------------------------------------------------------------------------------------------
		// FOM/SOM parameters
		Map<ParameterHandle, HlaDataType> parameters = new LinkedHashMap<ParameterHandle, HlaDataType>();
		ParameterHandle parameterHandle0 = new ParameterHandle();
		parameterHandle0.handle = 1;
		parameters.put(parameterHandle0, hlaDataTypeBasicHLAinteger32BE);
		ParameterHandle parameterHandle1 = new ParameterHandle();
		parameterHandle1.handle = 2;
		parameters.put(parameterHandle1, hlaDataTypeBasicHLAinteger64BE);
		ParameterHandle parameterHandle2 = new ParameterHandle();
		parameterHandle2.handle = 3;
		parameters.put(parameterHandle2, hlaDataTypeSimple1);

		//------------------------------------------------------------------------------------------------------------------------
		// Parameter test data
		byte[] parameterByteArray0 = new byte[4];
		parameterByteArray0[0] = 0x00;
		parameterByteArray0[1] = 0x00;
		parameterByteArray0[2] = 0x12;
		parameterByteArray0[3] = 0x34;

		// Perform test
		HlaDataType parameterDataTest0 = parameters.get(parameterHandle0);
		try {
			assertTrue (parameterDataTest0.testBuffer(parameterByteArray0, 0, hlaDataTypes) == parameterByteArray0.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// Parameter test data
		byte[] parameterByteArray1 = new byte[8];
		parameterByteArray1[0] = 0x00;
		parameterByteArray1[1] = 0x00;
		parameterByteArray1[2] = 0x12;
		parameterByteArray1[3] = 0x34;
		parameterByteArray1[4] = 0x00;
		parameterByteArray1[5] = 0x00;
		parameterByteArray1[6] = 0x12;
		parameterByteArray1[7] = 0x34;

		// Perform test
		HlaDataType parameterDataTest1 = parameters.get(parameterHandle1);
		try {
			assertTrue (parameterDataTest1.testBuffer(parameterByteArray1, 0, hlaDataTypes) == parameterByteArray1.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// Parameter test data
		byte[] parameterByteArray2 = new byte[2];
		parameterByteArray2[0] = 0x47;
		parameterByteArray2[1] = 0x11;

		// Perform test
		HlaDataType parameterDataTest2 = parameters.get(parameterHandle2);
		try {
			assertTrue (parameterDataTest2.testBuffer(parameterByteArray2, 0, hlaDataTypes) == parameterByteArray2.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// FOM/SOM attributes
		Map<AttributeHandle, HlaDataType> attributes = new LinkedHashMap<AttributeHandle, HlaDataType>();
		AttributeHandle attributeHandle0 = new AttributeHandle();
		attributeHandle0.handle = 0;
		attributes.put(attributeHandle0, hlaDataTypeEnumerated1);
		AttributeHandle attributeHandle1 = new AttributeHandle();
		attributeHandle1.handle = 1;
		attributes.put(attributeHandle1, hlaDataTypeFixedRecord);
		AttributeHandle attributeHandle2 = new AttributeHandle();
		attributeHandle2.handle = 2;
		attributes.put(attributeHandle2, hlaDataTypeFixedArrayMyFixedArray);
		AttributeHandle attributeHandle3 = new AttributeHandle();
		attributeHandle3.handle = 3;
		attributes.put(attributeHandle3, hlaDataTypeVariableArrayOuterArray);
		AttributeHandle attributeHandle4 = new AttributeHandle();
		attributeHandle4.handle = 4;
		attributes.put(attributeHandle4, hlaDataTypeVariantRecord);
		
		//------------------------------------------------------------------------------------------------------------------------
		// Attribute test data
		byte[] attributeByteArray0 = new byte[4];
		attributeByteArray0[0] = 0x00;
		attributeByteArray0[1] = 0x00;
		attributeByteArray0[2] = 0x00;
		attributeByteArray0[3] = 0x02;

		// Perform test
		HlaDataType attributeDataTest0 = attributes.get(attributeHandle0);
		try {
			assertTrue (attributeDataTest0.testBuffer(attributeByteArray0, 0, hlaDataTypes) == attributeByteArray0.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// Attribute test data
		byte[] attributeByteArray1 = new byte[41];
		attributeByteArray1[0] = 0x00;
		attributeByteArray1[1] = 0x00;
		attributeByteArray1[2] = 0x00;
		attributeByteArray1[3] = 0x01;
		attributeByteArray1[4] = 0x61;
		attributeByteArray1[5] = 0x00;
		attributeByteArray1[6] = 0x00;
		attributeByteArray1[7] = 0x00;
		attributeByteArray1[8] = 0x00;
		attributeByteArray1[9] = 0x00;
		attributeByteArray1[10] = 0x00;
		attributeByteArray1[11] = 0x02;
		attributeByteArray1[12] = 0x62;
		attributeByteArray1[13] = 0x63;
		attributeByteArray1[14] = 0x00;
		attributeByteArray1[15] = 0x00;
		attributeByteArray1[16] = 0x00;
		attributeByteArray1[17] = 0x00;
		attributeByteArray1[18] = 0x00;
		attributeByteArray1[19] = 0x03;
		attributeByteArray1[20] = 0x64;
		attributeByteArray1[21] = 0x65;
		attributeByteArray1[22] = 0x66;
		attributeByteArray1[23] = 0x00;
		attributeByteArray1[24] = 0x00;
		attributeByteArray1[25] = 0x00;
		attributeByteArray1[26] = 0x00;
		attributeByteArray1[27] = 0x04;
		attributeByteArray1[28] = 0x67;
		attributeByteArray1[29] = 0x68;
		attributeByteArray1[30] = 0x69;
		attributeByteArray1[31] = 0x70;
		attributeByteArray1[32] = 0x00;
		attributeByteArray1[33] = 0x00;
		attributeByteArray1[34] = 0x00;
		attributeByteArray1[35] = 0x05;
		attributeByteArray1[36] = 0x71;
		attributeByteArray1[37] = 0x72;
		attributeByteArray1[38] = 0x73;
		attributeByteArray1[39] = 0x74;
		attributeByteArray1[40] = 0x75;

		// Perform test
		HlaDataType attributeDataTest1 = attributes.get(attributeHandle1);
		try {
			assertTrue (attributeDataTest1.testBuffer(attributeByteArray1, 0, hlaDataTypes) == attributeByteArray1.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// Attribute test data
		byte[] attributeByteArray2 = new byte[12];
		attributeByteArray2[0] = 0x00;
		attributeByteArray2[1] = 0x00;
		attributeByteArray2[2] = 0x00;
		attributeByteArray2[3] = 0x02;
		attributeByteArray2[4] = 0x00;
		attributeByteArray2[5] = 0x00;
		attributeByteArray2[6] = 0x02;
		attributeByteArray2[7] = 0x03;
		attributeByteArray2[8] = 0x00;
		attributeByteArray2[9] = 0x02;
		attributeByteArray2[10] = 0x03;
		attributeByteArray2[11] = 0x04;

		// Perform test
		HlaDataType attributeDataTest2 = attributes.get(attributeHandle2);
		try {
			assertTrue (attributeDataTest2.testBuffer(attributeByteArray2, 0, hlaDataTypes) == attributeByteArray2.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// Attribute test data
		byte[] attributeByteArray3 = new byte[23];
		attributeByteArray3[0] = 0x00;
		attributeByteArray3[1] = 0x00;
		attributeByteArray3[2] = 0x00;
		attributeByteArray3[3] = 0x02;
		attributeByteArray3[4] = 0x00;
		attributeByteArray3[5] = 0x00;
		attributeByteArray3[6] = 0x00;
		attributeByteArray3[7] = 0x01;
		attributeByteArray3[8] = 0x01;
		attributeByteArray3[9] = 0x02;
		attributeByteArray3[10] = 0x03;
		attributeByteArray3[11] = 0x00;
		attributeByteArray3[12] = 0x00;
		attributeByteArray3[13] = 0x00;
		attributeByteArray3[14] = 0x00;
		attributeByteArray3[15] = 0x02;
		attributeByteArray3[16] = 0x04;
		attributeByteArray3[17] = 0x05;
		attributeByteArray3[18] = 0x06;
		attributeByteArray3[19] = 0x00;
		attributeByteArray3[20] = 0x03;
		attributeByteArray3[21] = 0x03;
		attributeByteArray3[22] = 0x03;

		// Perform test
		HlaDataType attributeDataTest3 = attributes.get(attributeHandle3);
		try {
			assertTrue (attributeDataTest3.testBuffer(attributeByteArray3, 0, hlaDataTypes) == attributeByteArray3.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//------------------------------------------------------------------------------------------------------------------------
		// Attribute test data
		byte[] attributeByteArray4 = new byte[8];
		attributeByteArray4[0] = 0x00;
		attributeByteArray4[1] = 0x00;
		attributeByteArray4[2] = 0x00;
		attributeByteArray4[3] = 0x00;
		attributeByteArray4[4] = 0x00;
		attributeByteArray4[5] = 0x00;
		attributeByteArray4[6] = 0x00;
		attributeByteArray4[7] = 0x01;

		// Perform test
		HlaDataType attributeDataTest4 = attributes.get(attributeHandle4);
		try {
			assertTrue (attributeDataTest4.testBuffer(attributeByteArray4, 0, hlaDataTypes) == attributeByteArray4.length);
		} catch (EncodingRulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}